{"ast":null,"code":"import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport withApollo from \"next-with-apollo\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\"; // Update the GraphQL endpoint to any instance of GraphQL that you like\n\nvar GRAPHQL_URL = process.env.BACKEND_URL || \"http://localhost:1337/graphql\";\nvar link = createHttpLink({\n  fetch: fetch,\n  // Switches between unfetch & node-fetch for client & server.\n  uri: GRAPHQL_URL\n}); // Export a HOC from next-with-apollo\n// Docs: https://www.npmjs.com/package/next-with-apollo\n\nexport default withApollo( // You can get headers and ctx (context) from the callback params\n// e.g. ({ headers, ctx, initialState })\nfunction (_ref) {\n  var initialState = _ref.initialState;\n  return new ApolloClient({\n    link: link,\n    cache: new InMemoryCache() //  rehydrate the cache using the initial data passed from the server:\n    .restore(initialState || {})\n  });\n});","map":{"version":3,"sources":["/Users/J/Documents/Websites/JaphexBlog/frontend/utils/apollo.js"],"names":["ApolloClient","InMemoryCache","withApollo","createHttpLink","fetch","GRAPHQL_URL","process","env","BACKEND_URL","link","uri","initialState","cache","restore"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2B,+BAA/C;AAEA,IAAMC,IAAI,GAAGN,cAAc,CAAC;AAC1BC,EAAAA,KAAK,EAALA,KAD0B;AACnB;AACPM,EAAAA,GAAG,EAAEL;AAFqB,CAAD,CAA3B,C,CAKA;AACA;;AACA,eAAeH,UAAU,EACvB;AACA;AACA;AAAA,MAAGS,YAAH,QAAGA,YAAH;AAAA,SACE,IAAIX,YAAJ,CAAiB;AACfS,IAAAA,IAAI,EAAEA,IADS;AAEfG,IAAAA,KAAK,EAAE,IAAIX,aAAJ,GACL;AADK,KAEJY,OAFI,CAEIF,YAAY,IAAI,EAFpB;AAFQ,GAAjB,CADF;AAAA,CAHuB,CAAzB","sourcesContent":["import { ApolloClient } from \"apollo-client\";  \nimport { InMemoryCache } from \"apollo-cache-inmemory\";  \nimport withApollo from \"next-with-apollo\";  \nimport { createHttpLink } from \"apollo-link-http\";  \nimport fetch from \"isomorphic-unfetch\";\n\n// Update the GraphQL endpoint to any instance of GraphQL that you like\nconst GRAPHQL_URL = process.env.BACKEND_URL || \"http://localhost:1337/graphql\";\n\nconst link = createHttpLink({  \n  fetch, // Switches between unfetch & node-fetch for client & server.\n  uri: GRAPHQL_URL\n});\n\n// Export a HOC from next-with-apollo\n// Docs: https://www.npmjs.com/package/next-with-apollo\nexport default withApollo(  \n  // You can get headers and ctx (context) from the callback params\n  // e.g. ({ headers, ctx, initialState })\n  ({ initialState }) =>\n    new ApolloClient({\n      link: link,\n      cache: new InMemoryCache()\n        //  rehydrate the cache using the initial data passed from the server:\n        .restore(initialState || {})\n    })\n);"]},"metadata":{},"sourceType":"module"}