{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar _jsxFileName = \"/Users/J/Documents/Websites/JaphexBlog/frontend/components/query.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nvar Query = function Query(_ref) {\n  var children = _ref.children,\n      query = _ref.query,\n      id = _ref.id;\n\n  var _useQuery = useQuery(query, {\n    variables: {\n      id: _parseInt(id)\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Error: \", _JSON$stringify(error));\n  return children({\n    data: data\n  });\n};\n\nexport default Query;","map":{"version":3,"sources":["/Users/J/Documents/Websites/JaphexBlog/frontend/components/query.js"],"names":["React","useQuery","Query","children","query","id","variables","data","loading","error"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA6B;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACTJ,QAAQ,CAACG,KAAD,EAAQ;AAChDE,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAE,UAASA,EAAT;AAAN;AADqC,GAAR,CADC;AAAA,MAClCE,IADkC,aAClCA,IADkC;AAAA,MAC5BC,OAD4B,aAC5BA,OAD4B;AAAA,MACnBC,KADmB,aACnBA,KADmB;;AAK1C,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAW,gBAAeA,KAAf,CAAX,CAAP;AACX,SAAON,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAJA;AAAF,GAAD,CAAf;AACA,CARD;;AAUA,eAAeL,KAAf","sourcesContent":["import React from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\n\nconst Query = ({ children, query, id }) => {\n\tconst { data, loading, error } = useQuery(query, {\n\t\tvariables: { id: parseInt(id) }\n\t})\n\n\tif (loading) return <p>Loading...</p>\n\tif (error) return <p>Error: {JSON.stringify(error)}</p>\n\treturn children({ data })\n}\n\nexport default Query"]},"metadata":{},"sourceType":"module"}